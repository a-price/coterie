macro(use_cxx_standard arg)
  if(CMAKE_VERSION VERSION_LESS "3.1")
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++${arg}")
    endif()
  else()
    set(CMAKE_CXX_STANDARD ${arg})
  endif()
endmacro()

macro(use_strict_compile_flags)
  if(CMAKE_VERSION VERSION_LESS "3.0")
    set(BUILD_FLAGS "-Wshadow -Wall -Wextra -Wpedantic -Werror=return-type")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${BUILD_FLAGS}")
  else()
    add_compile_options("-Wshadow")
    add_compile_options("-Wall")
    add_compile_options("-Wextra")
    add_compile_options("-Wpedantic")
    add_compile_options("-Werror=return-type")
  endif()
endmacro()

macro(use_openmp)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
  set(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -lgomp")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -lgomp")
endmacro()

macro(use_default_build_type arg)
  if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ${arg} ... FORCE)
    message(STATUS "Setting CMAKE_BUILD_TYPE to ${CMAKE_BUILD_TYPE} (default).")
  endif()
endmacro()

macro(enable_profile_build)
  option(PROFILE "Adds flags for gprof." OFF)
  if (PROFILE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
  endif()
endmacro()

macro(enable_coverage_build)
  option(COVERAGE "Adds flags for gcov." OFF)
  if(COVERAGE)
    set(CMAKE_BUILD_TYPE "Debug")
    set(CMAKE_CXX_FLAGS "-fprofile-arcs -ftest-coverage ${CMAKE_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "-lgcov ${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS "-lgcov ${CMAKE_SHARED_LINKER_FLAGS}")
  endif()
endmacro()

macro(find_eigen3_ros)
  find_package(Eigen3 QUIET)
  if(NOT EIGEN3_FOUND)
    # Fallback to cmake_modules
    find_package(cmake_modules REQUIRED)
    find_package(Eigen REQUIRED)
    set(EIGEN3_INCLUDE_DIRS ${EIGEN_INCLUDE_DIRS})
    set(EIGEN3_DEFINITIONS ${EIGEN_DEFINITIONS})
  else()
    set(EIGEN3_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})
  endif()
endmacro()

